// **********************************************************
// Assignment2:
// Student1:
// UTORID user_name: wangj930
// UT Student #: 1006390031
// Author: Junheng Wang
//
// Student2:
// UTORID user_name: anadaeth
// UT Student #: 1003171907
// Author: Ethan Ananda
//
// Student3:
// UTORID user_name: shinhy22
// UT Student #: 997743615
// Author: Hyun Woo (Eddie) Shin
//
// Student4:
// UTORID user_name: chouivan
// UT Student #: 1003599732
// Author: Ivanhoe Chou
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************
package test;

import static org.junit.Assert.*;
import java.lang.reflect.*;

import org.junit.Test;
import commands.Search;
//import commands.Rm;
import commands.SaveJShell;
import data.Directory;
import data.FileManager;
import errorHandler.NonvalidArgumentException;
import org.junit.Before;

import data.*;
/**
 * @author Junheng Wang, Hyun Woo (Eddie) Shin, Ivanhoe Chou, Ethan Anada
 */

public class SearchTest {
	
	private Search search = new Search();
	private MockFileManager MockFM;


	/**
	   * 
	   *  Search command set up
	 * @throws SecurityException 
	 * @throws NoSuchMethodException 
	   */
	
	public void setUp() throws Exception {
	    MockFM = new MockFileManager();
	  }

	  /**
	   * CatTest with a single file
	   * 
	   * @param none
	   * @return none
	   * @throws NonvalidArgumentException
	   */

	  @Test
	  public void SingleFile() throws NonvalidArgumentException {
	    
	    MockFM = new MockFileManager();
	    String[] inputArrayString = {"search", "/", "-type", "f", "-name", "\"fileA\""};
	    MockFM.current.
	    String actualOutput = search.run(MockFM, inputArrayString);
	    String expectedOutput = "";
//	    assertEquals(actualOutput, expectedOutput);
	  }
	  
   //   @Test
  //    public void SingleDir() throws Exception {
        //String result = (String) m.invoke(search, parameters); 


        //Do your assertions
        //assertNotNull(result);
       // try {
//          //Directory temp1 = new Directory("temp1", MockFM.getCurrent());
//          //MockFM.getCurrent().setDirectory("temp1", temp1);
//          //String actualOutput = search.run(MockFM, inputArrayString);
//          String actualOutput = "";
//          String expectedOutput = "";
//          assertEquals(actualOutput, expectedOutput);
        //} 
//        catch (NonvalidArgumentException e) {
//          assertEquals(e.getMessage(), e.getMessage());
//        }
        

  //    }
	  /**
	   * CatTest with a multiple files
	   * 
	   * @param none
	   * @return none
	   */

//	  @Test
//	  public void MultipleFile() throws NonvalidArgumentException {
//	    String[] inputArrayString = {"search", "fileA", "fileB"};
//	    String actualOutput = search.run(MockFM, inputArrayString);
//	    String expectedOutput = "";
//	    assertEquals(actualOutput, expectedOutput);
//	  }
//

//	  /**
//	   * CatTest with no file
//	   * 
//	   * @param none
//	   * @return none
//	   */
	  @Test
	  public void NoFile() {
	    try {
	      String[] inputArrayString = {"search"};
	      String actualOutput = search.run(MockFM, inputArrayString);
	      String expectedOutput = "Error, nonvalid input with args";
	      assertEquals(actualOutput, expectedOutput);
	      fail();
	    } catch (NonvalidArgumentException e) {
	      assertEquals(e.getMessage(), "Error, nonvalid input with args");
	    }
	  }
}
