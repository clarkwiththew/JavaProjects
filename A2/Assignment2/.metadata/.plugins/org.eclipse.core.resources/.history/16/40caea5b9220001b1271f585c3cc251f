// **********************************************************
// Assignment2:
// Student1:
// UTORID user_name: wangj930
// UT Student #: 1006390031
// Author: Junheng Wang
//
// Student2:
// UTORID user_name: anadaeth
// UT Student #: 1003171907
// Author: Ethan Ananda
//
// Student3:
// UTORID user_name: shinhy22
// UT Student #: 997743615
// Author: Hyun Woo (Eddie) Shin
//
// Student4:
// UTORID user_name: chouivan
// UT Student #: 1003599732
// Author: Ivanhoe Chou
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************
package driver;

import java.util.HashMap;
import java.util.Scanner;
import data.JFileManager;
import errorHandler.NonvalidArgumentException;
import java.util.ArrayList;
import java.lang.reflect.InvocationTargetException;

/**
 * Our JShell, where our user is able enter commands and receive the appropriate output, much like a
 * real shell would
 */
public class JShell {

  /** The fileManager. */
  private static JFileManager fm = JFileManager.createFileManager();

  /** The command hash map. */
  private static HashMap<String, String> commandHashMap = initializeCommandHashMap();

  /** The input history. */
  private static ArrayList<String> inputHistory = new ArrayList<String>();


  /**
   * Initialize command hash map.
   *
   * @return the hash map
   */
  private static HashMap<String, String> initializeCommandHashMap() {
    HashMap<String, String> commandHashMap = new HashMap<String, String>();
    commandHashMap.put("exit", "commands.exit");
    commandHashMap.put("mkdir", "commands.mkdir");
    commandHashMap.put("cd", "commands.cd");
    commandHashMap.put("ls", "commands.ls");
    commandHashMap.put("pwd", "commands.pwd");
    commandHashMap.put("pushd", "commands.pushd");
    commandHashMap.put("popd", "commands.popd");
    commandHashMap.put("history", "commands.history");
    commandHashMap.put("cat", "commands.cat");
    commandHashMap.put("echo", "commands.echo");
    commandHashMap.put("man", "commands.man");
    return commandHashMap;
  }

  /**
   * Gets the input history.
   *
   * @return the input history
   */
  public static ArrayList<String> getInputHistory() {

    ArrayList<String> outputHistory = new ArrayList<String>();

    for (String c : inputHistory)
      outputHistory.add(c);

    return outputHistory;

  }

  /**
   * Takes input commands from the user and tries to run the command
   *
   * @param args the command
   */
  public static void main(String[] args) {
    // scanner takes in user input
    // to be closed
    
    @SuppressWarnings("resource")
    Scanner scanner = new Scanner(System.in);

    String userInput = "";

    System.out.print(">> ");

    while (true) {
      userInput = scanner.nextLine();
      userInput = userInput.trim();

      // at this point, userInput is added to history list so that history command can retrieve

      inputHistory.add(userInput);

      // Otherwise, parse the input into an array of strings
      // the first element in tokens should be a command

      String[] argInputs = userInput.split("\\s+");

      // System.out.println("the command input: " + argInputs[0]);
      // System.out.println("next argument: " + argInputs[1]);
      // System.out.println("-----");

      if (commandHashMap.containsKey(argInputs[0])) {
        try {
          String name = commandHashMap.get(argInputs[0]);
          try {
            commands.Command inputCommand =
                (commands.Command) Class.forName(name).getDeclaredConstructor().newInstance();
            try {
              String outputResult = inputCommand.run(fm, argInputs);
              System.out.print(outputResult);
              System.out.print(">> ");
              
            } catch (NonvalidArgumentException e) {
              System.out.println(e.getMessage());
              System.out.print(">> ");
            }
          
          }
//          catch (InstantiationException e) {
//            //e.printStackTrace();
//          } 
//          catch (IllegalAccessException e) {
//            //e.printStackTrace();
//          } 
//          catch (IllegalArgumentException e) {
//            //e.printStackTrace();
//          } 
//          catch (InvocationTargetException e) {
//            //e.printStackTrace();
//          } 
//          catch (NoSuchMethodException e) {
//            //e.printStackTrace();
//          } 
//          catch (SecurityException e) {
//            //e.printStackTrace();
//          } 
        } 
        catch (ClassNotFoundException e) {
          //e.printStackTrace();
          System.out.println("Invalid Command");
        }

        catch (Exception e) {
          System.out.println("Invalid arguments");
        }
          
      }  
        else {

        System.out.println("Invalid Command");
        System.out.print(">> ");
      }
    }
  }
}
