package commands;

import java.util.Map;

import org.graalvm.compiler.debug.DiagnosticsOutputDirectory;

import data.Directory;
import data.File;
import data.FileManager;
import data.JFileManager;
import errorHandler.NonvalidArgumentException;
/**
 * @author Ivanhoe Chou
 */
public class Mv implements Command{

  @Override
  public String run(FileManager fm, String[] args) throws NonvalidArgumentException {
    // TODO Auto-generated method stub
    if(args.length!=3) {
      throw new NonvalidArgumentException("error with arguments, only 3 argument expected");
    }
    Directory currentdir = fm.getCurrent(); 
    // check if OLDPATH is a valid dir
    if (fm.checkPathToDir(currentdir, args[1])) {
    	Directory oldPathDir = fm.pathToCurrent(currentdir, args[1]);
		if(!fm.checkPathToDir(currentdir, args[2])) {
			Mkdir mkdir = new Mkdir();
			String[] newDir = {"mkdir", args[2]};
			mkdir.run(fm,newDir);
		}
		Directory newPathDir = fm.pathToCurrent(currentdir, args[2]);
		if(ifOldPathParentOfNew(fm, oldPathDir, newPathDir)){
			return "old path is parent of new path please try again \n";
		}
		String[] oldPath = {"rm",args[1]};
		moveDir(fm, oldPath, oldPathDir, newPathDir);
		return "";
    }
	else if (fm.checkPathToFile(args[1], currentdir)) {
		File oldFile = pathToFile(fm, args[1], currentdir);
		Directory oldPathParentDir = pathToParentDir(fm, currentdir, args[1]);
		if(!fm.checkPathToDir(currentdir, args[2])) {
			Directory newPathParentDir = pathToParentDir(fm, currentdir, args[2]);
			if (!(args[2].chars().filter(num -> num == '/').count() == 0)) {
				String newFileName = args[2].substring(args[2].lastIndexOf("/")+1,args[2].length());
				moveFile(fm, oldFile, newFileName, oldPathParentDir, newPathParentDir);
				return"";
			}
			String newFileName = args[2];
			moveFile(fm, oldFile, newFileName, oldPathParentDir, newPathParentDir);
			return"";
		}
		Directory newPathDir = fm.pathToCurrent(currentdir, args[2]); 
		moveFile(fm, oldFile, oldFile.getFileName(), oldPathParentDir, newPathDir);
		return"";
	}
	
  return "argument does point to valid Directory or File \n";
}
  

  
 private void moveFile(FileManager fm, File file, String fileName, Directory oldPathParentDir, Directory newPathDir) throws NonvalidArgumentException {
	 File newFile = new File(fileName, newPathDir); 
	 newFile.setContents(file.getFileContents());
	 newPathDir.setFile(fileName, newFile);
	 oldPathParentDir.removeFile(file.getFileName());
 }

private File pathToFile(FileManager fm, String path, Directory currentDir) throws NonvalidArgumentException {
	if (path.chars().filter(num -> num == '/').count() == 0) {
		String fileName = path;
		File file = currentDir.getFile(fileName);
		return file;
	}
	Directory oldPathParentDir = fm.pathToCurrent(currentDir, path.substring(0, path.lastIndexOf("/")));
	String fileName = path.substring(path.lastIndexOf("/")+1,path.length());
	File file = oldPathParentDir.getFile(fileName);
	return file;
}

private Directory pathToParentDir(FileManager fm, Directory currentDir, String path) throws NonvalidArgumentException {
	if (path.chars().filter(num -> num == '/').count() == 0) {
	 return currentDir;
	}
	Directory pathParentDir = fm.pathToCurrent(currentDir, path.substring(0, path.lastIndexOf("/")));
	return pathParentDir;
}

private void moveDir(FileManager fm, String[] oldPath, Directory oldPathDir, Directory newPathDir) throws NonvalidArgumentException {
	String oldPathDirName = oldPathDir.getDirName();
	Directory tempDirectory = new Directory(oldPathDirName, newPathDir);
	newPathDir.setDirectory(oldPathDirName, tempDirectory );
	Directory movedDir = newPathDir.getDirectory(oldPathDirName);
	try {
		for (Map.Entry<String, Directory> d : oldPathDir.getDirectoryHashMap().entrySet()) {
			movedDir.setDirectory(d.getKey(), d.getValue());
		}
	} catch (Exception e) {
		;
	}
	try {
		for (Map.Entry<String, File> f : oldPathDir.getFileHashMap().entrySet()) {
			movedDir.setFile(f.getKey(), f.getValue());
		}
	} catch (Exception e) {
		;
	}

	Rm rm = new Rm();
	rm.run(fm, oldPath);
}

private boolean ifOldPathParentOfNew (FileManager fm, Directory oldDir , Directory newDir) {
	String fullPathNew = "/"+ fm.getCurrentFullPath(newDir);
	String fullPathOld = "/" + fm.getCurrentFullPath(oldDir);
	if (fullPathNew.contains(fullPathOld)) {
		return true;
	}
	return false;
}
}
