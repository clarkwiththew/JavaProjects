package commands;

import java.util.Map;
import data.Directory;
import data.File;
import data.FileManager;
import data.JFileManager;
import errorHandler.NonvalidArgumentException;
import errorHandler.Validator;
import data.Directory;

/**
 * @author Junheng Wang
 */



public class Search implements Command {
  
  private String recurseFile(FileManager fm, Directory dir, String fileName) {
    String outputString="";
    // for (Map.Entry<String, File> t : dir.getFileHashMap().entrySet())
    // recurseDirectory(t.getValue());
    if (dir.containsFileKey(fileName)) {
      //outputString += fm.getCurrentFullPath(dir,fm.getCurrent()) + "/"+fileName + "\n";
      outputString += fm.getCurrentFullPath(dir) + "/"+fileName + "\n";

    }
    for (Map.Entry<String, Directory> d : dir.getDirectoryHashMap().entrySet()) {
      outputString+=recurseDirectory(fm, d.getValue(), fileName);
    }
    return outputString;
  }
  
  private String recurseDirectory(FileManager fm, Directory dir, String dirName) {
    String outputString="";
    // for (Map.Entry<String, File> t : dir.getFileHashMap().entrySet())
    // recurseDirectory(t.getValue());
    if (dir.containsDirectoryKey(dirName)) {
      //outputString += fm.getCurrentFullPath(dir,fm.getCurrent()) + "/"+dirName + "\n";
      outputString += fm.getCurrentFullPath(dir) + "/"+dirName + "\n";
    }
    for (Map.Entry<String, Directory> d : dir.getDirectoryHashMap().entrySet()) {
      outputString+=recurseDirectory(fm, d.getValue(), dirName);
    }
    return outputString;
  }

  @Override
  public String run(FileManager fm, String[] args) throws NonvalidArgumentException {
    // TODO Auto-generated method stub
    // no path is given, ls
    // current path
    String output = "";
    int dirFlag = 0;
    int fileFlag = 0;
    String objectName = fm.doubleQuotetoString(args);
    int len = args.length;
    // check for correct inputs
    for (int i = 1; i < len; i++) {
      if (args[i].equals("-type")) {
        if (Validator.isEqual(i, 1)) {
          throw new NonvalidArgumentException(
              "incorrect format with search inputs, no paths given");
        }
        if (i + 3 < len) {
          if (!args[i + 2].equals("-name")) {
            throw new NonvalidArgumentException("incorrect format with search inputs: -name");
          }
          if (args[i + 1].equals("f")) {
            fileFlag = 1;
          } else if (args[i + 1].equals("d")) {
            dirFlag = 1;
          } else {
            throw new NonvalidArgumentException(
                "incorrect format with search inputs: -type d or f");
          }

        } else {
          throw new NonvalidArgumentException("incorrect format with search inputs");
        }
      }
    }
    // check if object's Flag was set
    if (dirFlag == 0 && fileFlag == 0) {
      throw new NonvalidArgumentException("need to contain: -type f or d ");

    }
    // check for if files and directories containing filename
    Directory currentDir = null;
    String holder = "";
    if (Validator.isEqual(dirFlag, 1)) {
      // return objectName+"dir\n";
    }
    if (Validator.isEqual(fileFlag, 1)) {
      // return objectName+"file\n";
    }

    for (int i = 1; i < len; i++) {
      if (args[i].equals("-type")) {
        break;
      }
      currentDir = fm.pathToCurrent(fm.getCurrent(), args[i]);
      if (Validator.isEqual(dirFlag, 1)) {
        // return objectName+"dir\n";
        output=recurseDirectory(fm, currentDir, objectName);
      }
      if (Validator.isEqual(fileFlag, 1)) {
        // return objectName+"file\n";
        output=recurseFile(fm, currentDir, objectName);

      }

      //System.out.println(output);
      // recurse through all subdirs of currentDir to see if there is an object with this name
    }


    return output;

  }

}
