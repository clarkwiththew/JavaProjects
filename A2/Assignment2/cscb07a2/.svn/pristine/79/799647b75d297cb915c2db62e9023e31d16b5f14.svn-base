package commands;

import data.*;
import errorHandler.*;

/**
 * @author Junheng Wang
 */
/**
 * The Class ls, lists contents in a directory or file.
 */
public class Ls implements Command {

  /**
   * Run.
   * 
   * @param args
   *
   * @param fm the fileManager
   * @param args The path of the file or directory
   * @param output
   * @param currentDir
   * @param fm
   * @param newDir
   * @return Contents of the directory or the contents of the file or a suitable error message
   * @throws NonvalidArgumentException
   */
  public String lsHelper(String[] args, String output, Directory currentDir, FileManager fm,
      Directory newDir, int redirFlag) throws NonvalidArgumentException { // no path is given, ls
                                                                          // current path
    if (args.length == 1) {
      output += currentDir.getDirKey();
      output += currentDir.getFileKey();
    } else {
      try {
        for (int i = 1; i < args.length; i++) {
          // check if the given path leads to a file
          if (fm.checkPathToFile(args[i], currentDir)) {
            output += args[i] + "\n";
            continue;
          }

          else {
            newDir = fm.pathToCurrent(currentDir, args[i]);
            output += args[i] + ":" + "\n";
            output += newDir.getFileKey();
            output += newDir.getDirKey();
          }
        }
      } catch (Exception e) {
        if(redirFlag==0) {
        System.out.println(output);
        throw new NonvalidArgumentException("you have a nonvalid input, could not find the path");
      }
        else {
        System.out.println("you have a nonvalid input, could not find the path");
        }
    }
      }
    return output;
  }

  public String run(FileManager fm, String[] args) throws NonvalidArgumentException {

    String output = "";
    Directory currentDir = fm.getCurrent();
    Directory newDir = null;
    int redirFlag = 0;
    if (fm.redirectionChecker(args) == 1) {
      redirFlag = 1;
      String outString = fm.formatRedirect(args);
      outString = outString.trim();
      String[] holderString = outString.split("\\s+");
      output = lsHelper(holderString, output, currentDir, fm, newDir, redirFlag);
      fm.redirection(fm, args, output);
      return "";
    }
    return lsHelper(args, output, currentDir, fm, newDir,redirFlag);
    // return output + "\n";
  }

}
