package test;

import static org.junit.Assert.*
;

import org.junit.Test;

import org.junit.Before;

import errorHandler.NonvalidArgumentException;
import commands.History;
import commands.History;


public class HistoryTest {
	History history=new History();
    
	private MockFileManager MockFM;
	
	@Before
	public void setUp() {
		MockFM = new MockFileManager();
		MockFM.history.add("testcommand1");
		MockFM.history.add("testcommand2");
	}
	
	@Test
	public void FloatInput() throws NonvalidArgumentException {
		try {
		String []inputArrayString= {"history", "4.20420"};
	    String actualOutput = history.run(MockFM, inputArrayString);
	    String expectedOutput="error, not a valid argument";
	    assertEquals(actualOutput, expectedOutput);
	    fail();
		} catch  (NonvalidArgumentException e) {
			 assertEquals(e.getMessage(), "error, not a valid argument");
		}
	}
	
	@Test
	public void StringInput() throws NonvalidArgumentException {
		try {
		String []inputArrayString= {"history", "testing"};
	    String actualOutput = history.run(MockFM, inputArrayString);
	    String expectedOutput="error, not a valid argument";
	    assertEquals(actualOutput, expectedOutput);
	    fail();
		} catch  (NonvalidArgumentException e) {
			 assertEquals(e.getMessage(), "error, not a valid argument");
		}
	}
	
	@Test
	public void validinput() throws NonvalidArgumentException {
		String []inputArrayString= {"history", "3"};
		String actualOutput = history.run(MockFM, inputArrayString);
		String expectedOutput=">> 1. testcommand1\n" + 
				"2. testcommand2\n" + 
				"3. history 3";
		assertEquals(actualOutput, expectedOutput);
		}

}
