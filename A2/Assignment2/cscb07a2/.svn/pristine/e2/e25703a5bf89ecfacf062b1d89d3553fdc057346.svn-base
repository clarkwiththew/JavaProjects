package test;

import static org.junit.Assert.*;

import org.junit.Test;
import commands.Man;
import data.FileManager;
import errorHandler.NonvalidArgumentException;
import org.junit.Before;

/**
 * 
 * @author Ethan Anada
 *
 */


public class ManTest {
	
	Man man=new Man();
        
	private MockFileManager MockFM;
  
	/**
	   * ManTest command setup
	   */
  @Before
  public void setUp() {
    // Initialize the MFS
    MockFM = new MockFileManager();
  }

  
  /**
   * Valid command input
   */

  @Test
  public void ValidCmd() throws NonvalidArgumentException {
    String []inputArrayString= {"man", "pwd"};
    String actualOutput = man.run(MockFM,inputArrayString);
    String expectedOutput=
        "\nNAME\n\t\t" + 
        "pwd\n" + 
        "SYNOPSIS\n\t\t" + 
        "pwd\n" + 
        "DESCRIPTION\n\t\t" + 
        "Print name of current working directory.\n\n";

    assertEquals(actualOutput, expectedOutput);
  }
  
  /**
   * Invalid command input
   */
  @Test
  public void InvalidCmd() throws NonvalidArgumentException {

	  try {
		  String []inputArrayString= {"man", "abcd"};
		  String actualOutput = man.run(MockFM, inputArrayString);
		  String expectedOutput= "error, unable to recognize command";
		  assertEquals(actualOutput, expectedOutput);
		  fail();
	 } catch (NonvalidArgumentException e) {
		 assertEquals(e.getMessage(), "error, unable to recognize command");
	 }
  }

  /**
   * No input
   */
  
  @Test
  public void Empty() throws NonvalidArgumentException{
	  try {
		  String []inputArrayString= {"man"};
		  String actualOutput = man.run(MockFM, inputArrayString);
		  String expectedOutput= "error, requires only one command argument";
		  assertEquals(actualOutput, expectedOutput);
		  fail();
	 } catch (NonvalidArgumentException e) {
		 assertEquals(e.getMessage(), "error, requires only one command argument");
	 }
	  
  }


}
