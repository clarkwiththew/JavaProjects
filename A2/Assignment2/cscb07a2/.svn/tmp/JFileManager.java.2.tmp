package data;

import java.util.Stack;
// import errorHandler.Directory;
import errorHandler.NonvalidArgumentException;


/**
 * 
 * File Manager where our commands are executed
 *
 */
// new JFileManager;
public class JFileManager implements FileManager {
  private static JFileManager fm = null;
  private String fullCurrDirPath;
  private Directory root;
  private Directory current;
  private Stack<Directory> directoryStack;

  /**
   * 
   */

  private JFileManager() {
    root = new Directory("/", null); // the parent directory of root should be null
    current = root; // when the program first runs, current location should be root
    directoryStack = new Stack<Directory>();
  }

  public static JFileManager createFileManager() {
    if (fm == null) {
      fm = new JFileManager();
    }

    return fm;
  }

  /**
   * Gets the current directory
   */

  public Directory getCurrent() {
    return this.current;
  }

  /**
   * Sets the input directory as the new current directory
   */

  public void setCurrent(Directory newCurrent) {
    this.current = newCurrent;
  }

  // gets the file at a path
  // to be fixed
  // should return a file, but have it void for now to not give errors

  /**
   * Get the full path of the current directory
   */

  public String getPath() {
    return this.fullCurrDirPath;
  }

  /**
   * Sets the input path as our current directory path
   */

  public void setPath(String newPath) {
    this.fullCurrDirPath = newPath;
  }
  
  

  /**
   * Gets the current full path of the directory we are in
   * 
   * @return String
   */

  public String getCurrentFullPath() {
    if (current.getDirName() == "/")
      return "/";
    else {
      String path = current.retrieveFullPath();
      return path;
    }

  }

  /**
   * Pushes a directory to the stack of directories
   * 
   * @param Directory to push
   * @return The path of the directory stack
   */

  public void pushStack(Directory dir) {
    directoryStack.push(dir);
  }

  /**
   * Get the directory path that is at the top of the stack
   * 
   * @return The directory at the of the stack
   */

  public Directory popStack() {
    Directory tmp = directoryStack.pop();
    // System.out.println("Directory popped from stack is " + tmp.getDirName());
    return tmp;
  }

  /**
   * Path to current directory
   * 
   * @param Current directory
   * @param path
   * @return Path to current directory
   */
  // give it a path, it will return dir at the path
  public Directory pathToCurrent(Directory currentDir, String path)
      throws NonvalidArgumentException {
    // check for absolute path
    if (path.length() == 1) {
      if (path.substring(0, 1).equals(".")) {
        return currentDir;
      }
      if (path.substring(0, 1).equals("/")) {
        // make current path root
        currentDir = currentToRoot(currentDir);
        return currentDir;
      }
    }
    if (path.substring(0, 1).equals("/")) {
      // make current path root
      currentDir = currentToRoot(currentDir);
      // get rid of the first"/" in the path string
      path = path.substring(1, path.length());
    }
    if (path.length() == 2) {
      if (path.substring(0, 2).equals("..")) {
        currentDir = currentDir.getParentDir();
        return currentDir;
      }
    }
    // break down path to dirs
    String[] pathStrings = path.split("/");
    // loop through each dir
    for (int i = 0; i < pathStrings.length; i++) {

      if (pathStrings[i].equals("..")) {
        currentDir = currentDir.getParentDir();
        continue;
      }
      if (pathStrings[i].equals(".")) {
        continue;
      }
      if (currentDir.containsDirectoryKey(pathStrings[i])) {
        currentDir = currentDir.getDirectory(pathStrings[i]);
      } else {
        throw new NonvalidArgumentException("path doesnt exist");
      }
    }
    return currentDir;
  }


  /**
   * Current path to root
   * 
   * @param Current directory
   * @return Current directory
   */

  public Directory currentToRoot(Directory currentdir) {
    while (currentdir.getParentDir() != null) {
      currentdir = currentdir.getParentDir();
    }
    return currentdir;

  }

  /**
   * Save current working directory to directoryStack for pushd command
   */
  public void saveCurrentToStack() {
    directoryStack.push(this.getCurrent());
  }

  /**
   * Checks whether the input path contains a valid directory
   * 
   * @param DirectoryPath
   * @return true if path contains a valid directory, otherwise return false
   * @throws NonvalidArgumentException
   */

  public boolean validDirectoryPath(String DirectoryPath) throws NonvalidArgumentException {
    // 1. Absolute Path
    Directory temp;
    if (DirectoryPath.startsWith("/")) {
      temp = fm.root;
      String[] splitPath = DirectoryPath.substring(1).split("/");
      for (int i = 0; i < (splitPath.length); i++) {
        if (!temp.containsDirectoryKey(splitPath[i])) {
          return false;
        } else {
          temp = temp.getSubdirectory(splitPath[i]);
        }
      }
      return true;
    }
    // 2. Relative Path
    else {
      temp = fm.current;
      String[] splitPath = DirectoryPath.split("/");
      for (int i = 0; i < (splitPath.length); i++) {
        if (splitPath[i].equals("..")) {
          temp = temp.getParentDir();
          continue;
        }
        if (splitPath[i].equals("."))
          continue;
        if (!temp.containsDirectoryKey(splitPath[i])) {
          return false;
        } else {
          temp = temp.getSubdirectory(splitPath[i]);
        }
      }
      return true;
    }
  }

  /**
   * Checks whether the input path contains a valid file
   * 
   * @param FilePath
   * @return true if path contains a valid file, otherwise return false
   * @throws NonvalidArgumentException
   */
  public boolean validFilePath(String FilePath) throws NonvalidArgumentException {
    // 1. Absolute Path
    Directory temp;
    if (FilePath.startsWith("/")) {
      temp = fm.root;
      String[] splitPath = FilePath.substring(1).split("/");
      for (int i = 0; i < (splitPath.length); i++) {
        if (!temp.containsDirectoryKey(splitPath[i])) {
          return false;
        } else {
          if ((i == splitPath.length - 1) && (!temp.containsFileKey(splitPath[i])))
            return false;
          if (i != splitPath.length - 1)
            temp = temp.getSubdirectory(splitPath[i]);
        }
      }
      return true;
    }
    // 2. Relative Path
    else {
      temp = fm.current;
      String[] splitPath = FilePath.split("/");
      for (int i = 0; i < (splitPath.length); i++) {
<<<<<<< .mine

        
=======
>>>>>>> .r290
        if ((i == splitPath.length - 1) && (!temp.containsFileKey(splitPath[i])))
          return false;
        if (splitPath[i].equals("..")) {
          temp = temp.getParentDir();
          continue;
        }
        if (splitPath[i].equals("."))
          continue;
        if (i != (splitPath.length - 1) && !temp.containsDirectoryKey(splitPath[i]))
          return false;
        if ((i != splitPath.length - 1) && temp.containsDirectoryKey(splitPath[i]))
          temp = temp.getSubdirectory(splitPath[i]);
      }
      return true;
    }
  }

  /**
   * Returns a directory object of the input path
   * 
   * @param DirectoryPath
   * @return Directory
   */

  public Directory getDirectoryFromDirPath(String DirectoryPath) {
    Directory outputDir = null;
    // 1. Absolute Path
    Directory temp;
    if (DirectoryPath.startsWith("/")) {
      temp = fm.root;
      String[] splitPath = DirectoryPath.substring(1).split("/");
      for (int i = 0; i < (splitPath.length); i++) {

        if (i == (splitPath.length - 1)) {
          outputDir = temp.getSubdirectory(splitPath[i]);
        } else {
          temp = temp.getSubdirectory(splitPath[i]);
        }
      }
      return outputDir;
    }
    // 2. Relative Path
    else {
      temp = fm.current;
      String[] splitPath = DirectoryPath.split("/");
      for (int i = 0; i < (splitPath.length); i++) {
<<<<<<< .mine
=======
        // System.out.println("args=" + splitPath[i]);
>>>>>>> .r290
        if (splitPath[i].equals("..")) {
          temp = temp.getParentDir();
          continue;
        }
        if (splitPath[i].equals(".")) {
          continue;
        }
        if (i == (splitPath.length - 1)) {
          outputDir = temp.getSubdirectory(splitPath[i]);
        } else {
          temp = temp.getSubdirectory(splitPath[i]);
        }
      }
      return outputDir;
    }
  }

  /**
   * Returns a file object of the input path
   * 
   * @param FilePath
   * @return File
   */

  public File getFileFromFilePath(String FilePath) {
    File outputFile = null;
    // 1. Absolute Path
    Directory temp;
    if (FilePath.startsWith("/")) {
      temp = fm.root;
      String[] splitPath = FilePath.substring(1).split("/");
<<<<<<< .mine
      for (int i=0; i < (splitPath.length); i++) {
        
=======
      for (int i = 0; i < (splitPath.length); i++) {
>>>>>>> .r290
        if (i == splitPath.length - 1)
          outputFile = temp.getFile(splitPath[i]);
        else
          temp = temp.getSubdirectory(splitPath[i]);
      }
      return outputFile;
    }
    // 2. Relative Path
    else {
      temp = fm.current;
      String[] splitPath = FilePath.split("/");
      for (int i = 0; i < (splitPath.length); i++) {
<<<<<<< .mine

=======
>>>>>>> .r290
        if (splitPath[i].equals("..")) {
          temp = temp.getParentDir();
          continue;
        }
        if (splitPath[i].equals("."))
          continue;
        if (i == splitPath.length - 1)
          outputFile = temp.getFile(splitPath[i]);
        else
          temp = temp.getSubdirectory(splitPath[i]);
      }
      return outputFile;
    }
  }


  /**
   * given a path, return whether it is a file at the end of that path as a boolean
   * 
   * @param Path
   * @param Current Directory
   * @return boolean value of if the file is at the end
   */

  public boolean checkPathToFile(String path, Directory currentDir) {
    String fileName = path.substring(path.lastIndexOf("/") + 1, path.length());
    Directory fileDirectory = null;
    try {
      fileDirectory = pathToCurrent(currentDir, path);
    } catch (NonvalidArgumentException e) {
      // TODO Auto-generated catch block
      System.out.println("could not get path");
    }
    if (fileDirectory.containsFileKey(fileName)) {
      return true;
    }
    return false;
  }
}
