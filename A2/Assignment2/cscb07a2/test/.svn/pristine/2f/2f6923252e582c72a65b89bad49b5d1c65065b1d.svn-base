// **********************************************************
// Assignment2:
// Student1:
// UTORID user_name: wangj930
// UT Student #: 1006390031
// Author: Junheng Wang
//
// Student2:
// UTORID user_name: anadaeth
// UT Student #: 1003171907
// Author: Ethan Ananda
//
// Student3:
// UTORID user_name: shinhy22
// UT Student #: 997743615
// Author: Hyun Woo (Eddie) Shin
//
// Student4:
// UTORID user_name: chouivan
// UT Student #: 1003599732
// Author: Ivanhoe Chou
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************
package test;

import static org.junit.Assert.*;

import org.junit.Test;
import commands.Pushd;
import commands.Popd;
import data.Directory;
import data.FileManager;
import errorHandler.NonvalidArgumentException;
import org.junit.Before;

/**
 * @author Junheng Wang, Hyun Woo (Eddie) Shin, Ivanhoe Chou, Ethan Anada
 */

public class PushdTest {

    Pushd pushd = new Pushd();
    Popd popd = new Popd();
	private MockFileManager MockFM;
  

  @Before
  /**
   * 
   * PushdTest command set up
   *
   */

  public void setUp() {
    // Initialize the MFS
    MockFM = new MockFileManager();
//    data.Directory parent = new data.Directory("parent");
//    MockFM.directories.put("test1", new data.Directory("test1", parent));
    Directory temp1 = new Directory("temp1", MockFM.getCurrent());
    MockFM.getCurrent().setDirectory("temp1", temp1);
  }
  
  @Test
  /**
   * No argument in pushd
   */
  public void NoArg() throws NonvalidArgumentException{
	  try {
		  String []inputArrayString= {"popd"};
		  String actualOutput = pushd.run(MockFM,inputArrayString);
		  String expectedOutput= "error with arguments, only 1 arguement expected";
		  assertEquals(actualOutput, expectedOutput);
		  fail();
	  } catch (NonvalidArgumentException e) {
			 assertEquals(e.getMessage(), "error with arguments, only 1 arguement expected");
	  }
  }

  @Test
  /**
   * Pushing to a directory that does not exist
   */

  public void testPushToNonExistingDir() throws NonvalidArgumentException {
	  try {
		  String []inputArrayString= {"pushd", "./dne"};
		  String result = pushd.run(MockFM, inputArrayString);
		  assertEquals(result, "error with arguments, invalid directory");
		  fail();
	  } catch (NonvalidArgumentException e) {
			 assertEquals(e.getMessage(), "error with arguments, invalid directory");
	  }
  }
  
  @Test
  /**
   * Push of 1 directory.
   */
  public void push() {
	  try {
	      String[] inputArrayString = {"pushd", "./temp1"};
	      String actualOutput = pushd.run(MockFM, inputArrayString);
	      String expectedOutput = "";
	      assertEquals(actualOutput, expectedOutput);
	      String[] popdir = {"popd"};
	      String current = popd.run(MockFM, popdir);
	      assertEquals(MockFM.getCurrent(), MockFM.popStack());
	    } catch (NonvalidArgumentException e) {
	      assertEquals(e.getMessage(), e.getMessage());
	    }
  }
  
  @Test
  /**
   * Push of the same directory as the current directory
   */
  public void sameDir() {
   
  }
  
  
  
  
}